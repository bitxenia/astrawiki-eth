/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArticuloInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addContenido"
      | "contenido"
      | "getContenido"
      | "setContenido"
      | "setTitulo"
      | "titulo",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addContenido",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "contenido",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getContenido",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setContenido",
    values: [string[]],
  ): string;
  encodeFunctionData(functionFragment: "setTitulo", values: [string]): string;
  encodeFunctionData(functionFragment: "titulo", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addContenido",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "contenido", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContenido",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContenido",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "setTitulo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "titulo", data: BytesLike): Result;
}

export interface Articulo extends BaseContract {
  connect(runner?: ContractRunner | null): Articulo;
  waitForDeployment(): Promise<this>;

  interface: ArticuloInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  addContenido: TypedContractMethod<[_version: string], [void], "nonpayable">;

  contenido: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getContenido: TypedContractMethod<[], [string[]], "view">;

  setContenido: TypedContractMethod<
    [_contenido: string[]],
    [void],
    "nonpayable"
  >;

  setTitulo: TypedContractMethod<[_titulo: string], [void], "nonpayable">;

  titulo: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "addContenido",
  ): TypedContractMethod<[_version: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contenido",
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getContenido",
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "setContenido",
  ): TypedContractMethod<[_contenido: string[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTitulo",
  ): TypedContractMethod<[_titulo: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "titulo",
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
