/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArticuloFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "articulos"
      | "crearArticulo"
      | "getArticulos"
      | "getTitulos"
      | "tituloToAddress"
      | "titulos",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "articulos",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "crearArticulo",
    values: [string, string[]],
  ): string;
  encodeFunctionData(
    functionFragment: "getArticulos",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getTitulos",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "tituloToAddress",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "titulos",
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: "articulos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crearArticulo",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArticulos",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getTitulos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tituloToAddress",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "titulos", data: BytesLike): Result;
}

export interface ArticuloFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ArticuloFactory;
  waitForDeployment(): Promise<this>;

  interface: ArticuloFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  articulos: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  crearArticulo: TypedContractMethod<
    [titulo: string, contenido: string[]],
    [void],
    "nonpayable"
  >;

  getArticulos: TypedContractMethod<[], [string[]], "view">;

  getTitulos: TypedContractMethod<[], [string[]], "view">;

  tituloToAddress: TypedContractMethod<[arg0: string], [string], "view">;

  titulos: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "articulos",
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "crearArticulo",
  ): TypedContractMethod<
    [titulo: string, contenido: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getArticulos",
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTitulos",
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "tituloToAddress",
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "titulos",
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  filters: {};
}
